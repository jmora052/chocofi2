#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// LAYERS

#define COL 0
#define NAV 1
#define NUM 2

// MACROS

#define U_UNDO  LG(Z)
#define U_CUT   LG(X)
#define U_COPY  LG(C)
#define U_PSTE  LG(V)
#define U_REDO  LS(LG(Z))
#define U_CLIP  LC(LG(C))
#define U_SHOT  LS(LG(N4))

// CONFIGURATION

#define COMBO(NAME, KEYPOS) \
  combo_##NAME { \
      timeout-ms = <40>; \
      key-positions = <KEYPOS>; \
      bindings = <&kp NAME>; \
  };

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };
};

// KEYMAP

/ {
    combos {
        compatible = "zmk,combos";

        // Left-hand combos

        COMBO(AT_SIGN, 1 2)
      COMBO(LEFT_BRACE, 2 3)
      COMBO(EXCLAMATION, 1 11)
      COMBO(HASH, 2 12)
      COMBO(DOLLAR, 3 13)
      COMBO(GRAVE, 10 11)
      COMBO(COLON, 11 12)
      COMBO(LEFT_PARENTHESIS, 12 13)
      COMBO(PERCENT, 11 21)
      COMBO(CARET, 12 22)
      COMBO(AMPERSAND, 13 23)
      COMBO(TILDE, 20 21)
      COMBO(SEMICOLON, 21 22)
      COMBO(LEFT_BRACKET, 22 23)

        // Right-hand combos

        COMBO(RIGHT_BRACE, 6 7)
      COMBO(DOUBLE_QUOTES, 7 8)
      COMBO(EQUAL, 6 16)
      COMBO(PIPE, 7 17)
      COMBO(BACKSLASH, 8 18)
      COMBO(RIGHT_PARENTHESIS, 16 17)
      COMBO(MINUS, 17 18)
      COMBO(KP_PLUS, 18 19)
      COMBO(ASTERISK, 16 26)
      COMBO(LESS_THAN, 17 27)
      COMBO(GREATER_THAN, 18 28)
      COMBO(RIGHT_BRACKET, 26 27)
      COMBO(UNDERSCORE, 27 28)
      COMBO(QUESTION, 28 29)

        num_layer {
            bindings = <&sl 1>;
            key-positions = <31 34>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
        };

        super-backspace {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <16 17 18>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <26 27>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        letters {
            label = "COLMAK";
            bindings = <
  &kp Q  &kp W  &kp E      &kp R      &kp T        &kp Y           &kp U         &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D      &kp F      &kp G        &kp H           &kp J         &kp K      &kp L    &kp SEMICOLON
  &kp Z  &kp X  &kp C      &kp V      &kp B        &kp N           &kp M         &kp COMMA  &kp DOT  &kp FSLH
                &kp ENTER  &kp RCTRL  &kp SPACE    &kp LEFT_SHIFT  &kp LEFT_ALT  &kp DEL
            >;
        };

        num_layer {
            label = "NUMPAD";
            bindings = <
  &kp F1         &kp F2        &kp F3        &kp F4            &kp F5            &kp F6           &kp F7             &kp F8        &kp F9      &kp F10
  &kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4      &kp N5            &kp NUMBER_6     &kp N7             &kp N8        &kp N9      &kp N0
  &kp BACKSLASH  &kp EQUAL     &kp MINUS     &kp LEFT_BRACKET  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp COMMA     &kp PERIOD  &kp SQT
                               &kp LEFT_WIN  &none             &bt BT_PRV        &bt BT_NXT       &none              &kp LEFT_WIN
            >;
        };

        nav_layer {
            label = "ARROWS";
            bindings = <
  &kp TAB      &kp LG(F14)     &kp LG(F15)   &kp LG(F16)  &kp LG(F17)       &kp F18   &kp F19       &kp F20       &kp F21    &kp F11
  &kp LS(TAB)  &none           &none         &none        &kp U_CLIP        &kp LEFT  &kp DOWN      &kp UP_ARROW  &kp RIGHT  &kp F12
  &bt BT_CLR   &bt BT_CLR_ALL  &kp U_COPY    &kp U_PSTE   &sys_reset        &kp HOME  &kp PG_DN     &kp PG_UP     &kp END    &none
                               &kp LEFT_WIN  &none        &kp LEFT_SHIFT    &kp RET   &kp LEFT_ALT  &kp LEFT_WIN
            >;
        };
    };
};
